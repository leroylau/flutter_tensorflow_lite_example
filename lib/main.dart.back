import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:tflite/tflite.dart';
import 'package:image_picker/image_picker.dart';

void main() => runApp(MyApp());

const String mobile = 'MobileNet';
const String ssd = 'SSD MobileNet';
const String yolo = 'Tiny YOLOv2';
const String deeplab = 'DeepLab';

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  File _image;
  List _recognitions;
  String _model = mobile;
  double _imageHeight;
  double _imageWidth;
  bool _busy = false;

  // load the pre_trained model
  Future loadModel() async {
    Tflite.close();
    try {
      String res;
      switch (_model) {
        case yolo:
          res = await Tflite.loadModel(
            model: 'assets/yolov2_tiny.tflite',
            labels: 'assets/yolov2_tiny.txt',
          );
          break;
        case ssd:
          res = await Tflite.loadModel(
            model: 'assets/ssd_mobilenet.tflite',
            labels: 'assets/ssd_mobilenet.txt',
          );
          break;
        case deeplab:
          res = await Tflite.loadModel(
            model: 'assets/deeplabv3_257_mv_gpu.tflite',
            labels: 'assets/deeplabv3_257_mv_gpu.txt',
          );
          break;
        default:
          res = await Tflite.loadModel(
            model: 'assets/mobilenet_v1_1.0_224.tflite',
            labels: 'assets/mobilenet_v1_1.0_224.txt',
          );
      }
      print(res);
    } on PlatformException {}
  }

  // Image prediction functions
  Future yolov2Tiny(File image) async {
    var recognitions = await Tflite.detectObjectOnImage(
      path: image.path,
      model: 'YOLO',
      threshold: 0.3,
      imageMean: 0.0,
      imageStd: 255.0,
      numResultsPerClass: 1,
    );

    setState(() {
      _recognitions = recognitions;
    });
  }

  Future ssdMobileNet(File image) async {
    var recognitions = await Tflite.detectObjectOnImage(
      path: image.path,
      numResultsPerClass: 1,
    );

    setState(() {
      _recognitions = recognitions;
    });
  }

  Future segmentMobileNet(File image) async {
    var recognitions = await Tflite.runSegmentationOnImage(
      path: image.path,
      imageMean: 127.5,
      imageStd: 127.5,
    );

    setState(() {
      _recognitions = recognitions;
    });
  }

  Future recognizeImage(File image) async {
    var recognitions = await Tflite.runModelOnImage(
      path: image.path,
      numResults: 6,
      threshold: 0.05,
      imageMean: 127.5,
      imageStd: 127.5,
    );

    setState(() {
      _recognitions = recognitions;
    });
  }

  // Predict a image
  Future predictImage(File image) async {
    if (image == null) return;

    switch (_model) {
      case yolo:
        await yolov2Tiny(image);
        break;
      case ssd:
        await ssdMobileNet(image);
        break;
      case deeplab:
        await segmentMobileNet(image);
        break;
      default:
        await recognizeImage(image);
    }

    FileImage(image).resolve(ImageConfiguration()).addListener(
      (ImageInfo info, bool _) {
        setState(
          () {
            _imageHeight = info.image.height.toDouble();
            _imageWidth = info.image.width.toDouble();
          },
        );
      },
    );

    setState(
      () {
        _image = image;
        _busy = false;
      },
    );
  }

  // pick a image to predict
  Future predictImagePicker() async {
    var image = await ImagePicker.pickImage(source: ImageSource.gallery);
    if (image == null) return;
    setState(() {
      _busy = true;
    });
    predictImage(image);
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    List<Widget> stackChildren = [];

    if (_model == deeplab && _recognitions != null) {
      stackChildren.add(Positioned(
        top: 0.0,
        left: 0.0,
        width: size.width,
        child: _image == null
            ? Text('No image is selected')
            : Container(
                decoration: BoxDecoration(
                    image: DecorationImage(
                        alignment: Alignment.topCenter,
                        image: MemoryImage(_recognitions),
                        fit: BoxFit.fill)),
                child: Opacity(
                  opacity: 0.3,
                  child: Image.file(_image),
                ),
              ),
      ));
    } else {
      stackChildren.add(Positioned(
        top: 0.0,
        left: 0.0,
        width: size.width,
        child:
            _image == null ? Text('No image is selected') : Image.file(_image),
      ));
    }

    if (_model == mobile) {
      stackChildren.add(Center(
        child: Column(
          children: _recognitions != null
              ? _recognitions.map((res) {
                  return Text(
                    '${res['index']} - ${res["label"]}: ${res["confidence"].toStringAsFixed(3)}',
                    style: TextStyle(
                      color: Colors.black,
                      fontSize: 20.0,
                      background: Paint()..color = Colors.white,
                    ),
                  );
                }).toList()
              : [],
        ),
      ));
    } else if (_model == ssd || _model == yolo) {
      stackChildren.addAll(renderBoxes(size));
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        actions: <Widget>[
          PopupMenuButton<String>(
            onSelected: (value) {},
            itemBuilder: (context) {
              List<PopupMenuEntry<String>> menuEntries = [
                PopupMenuItem<String>(
                  child: Text(mobile),
                  value: mobile,
                ),
                PopupMenuItem<String>(
                  child: Text(ssd),
                  value: ssd,
                ),
                PopupMenuItem<String>(
                  child: Text(yolo),
                  value: yolo,
                ),
                PopupMenuItem<String>(
                  child: Text(deeplab),
                  value: deeplab,
                ),
              ];
              return menuEntries;
            },
          ),
        ],
      ),
      body: Stack(
        children: <Widget>[],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {},
        tooltip: 'Pick A Image',
        child: Icon(Icons.image),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
